apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFile "proguard-rules.pro"
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.0.0-beta01'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.assertj:assertj-core:3.10.0'
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC1"
    testImplementation "org.robolectric:robolectric:4.0-alpha-2"
    testImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test:runner:1.1.0-alpha4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0-alpha4'
}

android.libraryVariants.all { variant ->
    task("assemble${variant.name.capitalize()}Sources", type: Jar) {
        classifier = 'sources'
        variant.javaCompile.source
    }
    project.artifacts.add("archives", tasks["assemble${variant.name.capitalize()}Sources"])
}

android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc, dependsOn: "assemble${variant.name.capitalize()}") {
        source = variant.javaCompile.source
        title = 'TooLargeTool'

        options {
            links "http://docs.oracle.com/javase/7/docs/api/"
            linksOffline "http://d.android.com/reference","${android.sdkDirectory}/docs/reference"
        }
        doFirst {
            classpath += files(variant.javaCompiler.classpath.files)
            classpath += files(project.android.getBootClasspath())
        }

        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

android.libraryVariants.all { variant ->
    task("assemble${variant.name.capitalize()}Javadoc", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
        classifier = 'javadoc'
        from tasks["generate${variant.name.capitalize()}Javadoc"].destinationDir
    }
    project.artifacts.add("archives", tasks["assemble${variant.name.capitalize()}Javadoc"])
}


def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

group = 'com.ymnd.android'
version "${versionMajor}.${versionMinor}.${versionPatch}"

def githubUrl = 'https://github.com/ymnder/toolargetool'
def libraryName = 'toolargetool'

install {
    repositories.mavenInstaller {
        pom.project {
            name project.group + '.' + libraryName
            description 'A tool for debugging TransactionTooLargeException on Android'
            url githubUrl
            inceptionYear '2018'

            packaging 'aar'
            groupId project.group
            artifactId libraryName
            version version

            licenses {
                license {
                    name 'The MIT License (MIT)'
                    url 'https://opensource.org/licenses/MIT'
                }
            }

            scm {
                connection githubUrl + '.git'
                url githubUrl

            }

            developers {
                developer {
                    id = 'ymnd'
                    name 'ymnd'
                }
            }
        }
    }
}

Properties bintrayProperties = new Properties()
try {
    bintrayProperties.load(project.file('bintray.properties').newDataInputStream())
} catch (FileNotFoundException ignored) {}

bintray {
    user = bintrayProperties.getProperty('user')
    key = bintrayProperties.getProperty('key')
    configurations = ['archives']

    pkg {
        repo = libraryName
        name = libraryName
        licenses = ['MIT']
        websiteUrl = githubUrl
        issueTrackerUrl = githubUrl + '/blob/master/LICENSE'
        vcsUrl = githubUrl + '.git'
        issueTrackerUrl = githubUrl + '/issues'
        publicDownloadNumbers = true
        publish = true
        version {
            name = version
            desc = 'toolargetool version ' + version
            released = new Date()
            vcsTag = 'v' + version
        }
    }
}
